syntax = "proto3";

/*
* protocol for hope 104 gateway gwservice communication with rs485 service
*/
enum messageType{
	MSGCODE_INVALID=0;
	MSGCODE_DISCOVER_RS485_DEV_REQ=1;
	MSGCODE_DISCOVER_RS485_DEV_RSP=2;
	MSGCODE_CTRL_RS485_ACTION_REQ=3;
	MSGCODE_CTRL_RS485_ACTION_RSP=4;
	MSGCODE_GET_DEVS_STATUS_REQ=5;
	MSGCODE_GET_DEVS_STATUS_RSP=6;
	MSGCODE_GET_ONE_DEV_STATUS_REQ=7;
	MSGCODE_GET_ONE_DEV_STATUS_RSP=8;
	MSGCODE_DEVICE_READY_NOTIFY=9;
	MSGCODE_DEVICE_NOT_READY_NOTIFY=10;
	MSGCODE_JOIN_ACTION_REQ=11;
	MSGCODE_JOIN_ACTION_RSP=12;
	MSGCODE_LEAVE_ACTION_REQ=13;
	MSGCODE_LEAVE_ACTION_RSP=14;
	MSGCODE_SYNC_DEVICE_NOTIFY=15;
	MSGCODE_SYNC_SCENE_NOTIFY=16;
	MSGCODE_ADD_GROUP_SUB_DEVS_REQ=17;
	MSGCODE_ADD_GROUP_SUB_DEVS_RSP=18;
	MSGCODE_CTRL_GOURP_SUB_DEVS_REQ=19;
	MSGCODE_CTRL_GOURP_SUB_DEVS_RSP=20;
	MSGCODE_DELETE_GOURP_SUB_DEVS_REQ=21;
	MSGCODE_DELETE_GOURP_SUB_DEVS_RSP=22;
	MSGCODE_DELETE_SUB_DEVS_REQ=23;
	MSGCODE_DELETE_SUB_DEVS_RSP=24;
	MSGCODE_HEARTBEAT_NOTIFY=25;
	MSGCODE_ADD_SUB_DEVICE_REQ=26;
	MSGCODE_ADD_SUB_DEVICE_RSP=27;
	MSGCODE_GET_GATEWAY_INFO_REQ=28;
	MSGCODE_GET_GATEWAY_INFO_RSP=29;
	MSGCODE_GATEWAY_OTA_INFO_REQ=30;
	MSGCODE_GATEWAY_OTA_INFO_RSP=31;
	MSGCODE_GET_GATEWAY_MACADDR_REQ=32;
	MSGCODE_GET_GATEWAY_MACADDR_RSP=33;
	// MSGCODE_GATEWAY_START_OTA_REQ=30;
	// MSGCODE_GATEWAY_START_OTA_RSP=31;
	// MSGCODE_GATEWAY_OTA_PACKAGE_TRANSFER_REQ=32;
	// MSGCODE_GATEWAY_OTA_PACKAGE_TRANSFER_RSP=33;
}

enum messageDpType{
	DP_TYPE_RAW=0;
	DP_TYPE_BOOL=1;
	DP_TYPE_VALUE=2;
	DP_TYPE_STRING=3;
	DP_TYPE_ENUM=4;
	DP_TYPE_BITMAP=5;
}

message Datapoint{
	uint32 dpid=1;
	messageDpType type=2;
	uint32 len=3;
	oneof t_value{
		string v_raw=4;
		bool v_bool=5;
		int32 v_value=6;
		string v_string=7;
		int32 v_enum=8;
		int32 v_bitmap=9;
	}
	
}

message leshiBTmeshDeviceMsg{
	
	// message ota_data{
	// 	uint32 offset_addr=1;	
	// 	repeated uint32 pack_data=2;
	// }
	// message ota_item {
	// 	uint32 file_size=1;					// 升级文件大小
	// 	uint32 page_size=2;					// 升级包分包传输大小
	// 	ota_data data=4;					// 数据包内容
	// }
	// reserved 1;
	
	string deviceId=2;          				//device id sub device id
	string devicePid=5;							//device pid
	bool online=6;              				//online status (status)
	int32 dp_size=7;
	repeated Datapoint dp=8;					//datapoint(ctrl and status)
	int32 groupId=9; 							//group id
	oneof rets{
		int32 ret=10;
	}
	string deviceVer=11;						//device version
	int32 hb_time=12;							//heartbeat time
}

message btActionMsg{
    oneof actionId{
        string deviceId=1;          		    //control device id sub device id
        int32 groupId=2; 						//control group id(don't need response)
    }

	string deviceName=3;        				//display device name(for switch name or device name)
	string devicePid=5;							//device pid
	bool online=6;              				//online status (status)
	int32 dp_size=7;
	repeated Datapoint dp=8;					            //datapoint(ctrl and status) only one
	int32 ret=10;
}

message Gatewayinfo{
	string v=1;
	uint32 m=2;
	uint32 cap=3;
	string gw_macaddr=4;
}
message GatewayOta{
	enum gw_ota_sta{
		GW_OTA_FAILURE=0;
		GW_OTA_SUCCESS=1;
	}
	string GwOtaPath=1;
	gw_ota_sta OtaSta=2;
}

/*main page push and pop message*/
message combineMsg{
	uint32 index=1;             //ordinal of item
	btActionMsg action=7;
}

message commonMessage {
	uint64 serial=1;                 //message sequence number
	uint32 combo_size=2;
	repeated combineMsg combo=3;
	int32 groupId=4;
}
