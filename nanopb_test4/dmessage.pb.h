/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_DMESSAGE_PB_H_INCLUDED
#define PB_DMESSAGE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* protocol for hope 104 gateway gwservice communication with rs485 service */
typedef enum _messageType {
    messageType_MSGCODE_INVALID = 0,
    messageType_MSGCODE_DISCOVER_RS485_DEV_REQ = 1,
    messageType_MSGCODE_DISCOVER_RS485_DEV_RSP = 2,
    messageType_MSGCODE_CTRL_RS485_ACTION_REQ = 3,
    messageType_MSGCODE_CTRL_RS485_ACTION_RSP = 4,
    messageType_MSGCODE_GET_DEVS_STATUS_REQ = 5,
    messageType_MSGCODE_GET_DEVS_STATUS_RSP = 6,
    messageType_MSGCODE_GET_ONE_DEV_STATUS_REQ = 7,
    messageType_MSGCODE_GET_ONE_DEV_STATUS_RSP = 8,
    messageType_MSGCODE_DEVICE_READY_NOTIFY = 9,
    messageType_MSGCODE_DEVICE_NOT_READY_NOTIFY = 10,
    messageType_MSGCODE_JOIN_ACTION_REQ = 11,
    messageType_MSGCODE_JOIN_ACTION_RSP = 12,
    messageType_MSGCODE_LEAVE_ACTION_REQ = 13,
    messageType_MSGCODE_LEAVE_ACTION_RSP = 14,
    messageType_MSGCODE_SYNC_DEVICE_NOTIFY = 15,
    messageType_MSGCODE_SYNC_SCENE_NOTIFY = 16,
    messageType_MSGCODE_ADD_GROUP_SUB_DEVS_REQ = 17,
    messageType_MSGCODE_ADD_GROUP_SUB_DEVS_RSP = 18,
    messageType_MSGCODE_CTRL_GOURP_SUB_DEVS_REQ = 19,
    messageType_MSGCODE_CTRL_GOURP_SUB_DEVS_RSP = 20,
    messageType_MSGCODE_DELETE_GOURP_SUB_DEVS_REQ = 21,
    messageType_MSGCODE_DELETE_GOURP_SUB_DEVS_RSP = 22,
    messageType_MSGCODE_DELETE_SUB_DEVS_REQ = 23,
    messageType_MSGCODE_DELETE_SUB_DEVS_RSP = 24,
    messageType_MSGCODE_HEARTBEAT_NOTIFY = 25,
    messageType_MSGCODE_ADD_SUB_DEVICE_REQ = 26,
    messageType_MSGCODE_ADD_SUB_DEVICE_RSP = 27,
    messageType_MSGCODE_GET_GATEWAY_INFO_REQ = 28,
    messageType_MSGCODE_GET_GATEWAY_INFO_RSP = 29,
    messageType_MSGCODE_GATEWAY_OTA_INFO_REQ = 30,
    messageType_MSGCODE_GATEWAY_OTA_INFO_RSP = 31,
    messageType_MSGCODE_GET_GATEWAY_MACADDR_REQ = 32,
    messageType_MSGCODE_GET_GATEWAY_MACADDR_RSP = 33 /* MSGCODE_GATEWAY_START_OTA_REQ=30;
 MSGCODE_GATEWAY_START_OTA_RSP=31;
 MSGCODE_GATEWAY_OTA_PACKAGE_TRANSFER_REQ=32;
 MSGCODE_GATEWAY_OTA_PACKAGE_TRANSFER_RSP=33; */
} messageType;

typedef enum _messageDirection {
    messageDirection_MSG_DIR_INVALID = 0,
    messageDirection_MSG_DIR_UART1 = 1, /* physical UART port 1 on main SOC */
    messageDirection_MSG_DIR_UART2 = 2, /* physical UART port 2 on main SOC */
    messageDirection_MSG_DIR_UART3 = 3, /* physical UART port 4 on "SPI to UART" */
    messageDirection_MSG_DIR_UART4 = 4, /* physical UART port 5 on "SPI to UART" */
    messageDirection_MSG_DIR_UART5 = 5, /* physical UART port 6 on "SPI to UART" */
    messageDirection_MSG_DIR_UART6 = 6, /* physical UART port 7 on "SPI to UART" */
    messageDirection_MSG_DIR_BLESERVICE = 7, /* BLE service */
    messageDirection_MSG_DIR_GWSERVICE = 10 /* direction of gwservice */
} messageDirection;

typedef enum _messageDpType {
    messageDpType_DP_TYPE_RAW = 0,
    messageDpType_DP_TYPE_BOOL = 1,
    messageDpType_DP_TYPE_VALUE = 2,
    messageDpType_DP_TYPE_STRING = 3,
    messageDpType_DP_TYPE_ENUM = 4,
    messageDpType_DP_TYPE_BITMAP = 5
} messageDpType;

typedef enum _GatewayOta_gw_ota_sta {
    GatewayOta_gw_ota_sta_GW_OTA_FAILURE = 0,
    GatewayOta_gw_ota_sta_GW_OTA_SUCCESS = 1
} GatewayOta_gw_ota_sta;

/* Struct definitions */
/* internal message not for manipulate,therefore don't contain pack and unpack API */
typedef struct _direction {
    messageDirection src;
    messageDirection dst;
} direction;

typedef struct _type_raw {
    uint32_t raw_size;
    pb_callback_t raw;
} type_raw;

typedef struct _type_string {
    uint32_t string_size;
    pb_callback_t string;
} type_string;

typedef struct _Datapoint {
    uint32_t dpid;
    messageDpType type;
    uint32_t len;
    pb_size_t which_t_value;
    union {
        char v_raw[32];
        bool v_bool;
        int32_t v_value;
        char v_string[32];
        int32_t v_enum;
        int32_t v_bitmap;
    } t_value;
} Datapoint;

typedef struct _leshiBTmeshGWMsg {
    char deviceId[32]; /* device id sub device id */
    char *deviceName; /* device name */
    int32_t eleCata; /* derive from cloud server */
    char devicePid[32]; /* device pid */
    bool online; /* online status (status) */
    int32_t dp_size;
    Datapoint** dp; /* datapoint(ctrl and status) */
    int32_t groupId; /* group id */
    pb_size_t which_rets;
    union {
        int32_t ret;
    } rets;
    char deviceVer[32]; /* device version */
    char hb_time[32]; /* heartbeat time */
} leshiBTmeshGWMsg;

typedef struct _btActionMsg {
    pb_size_t which_actionId;
    union {
        pb_callback_t deviceId; /* device id sub device id */
        int32_t groupId; /* group id */
    } actionId;
    pb_callback_t deviceName; /* device name */
    pb_callback_t devicePid; /* device pid */
    bool online; /* online status (status) */
    int32_t dp_size;
    bool has_dp;
    Datapoint dp; /* datapoint(ctrl and status) only one */
    int32_t ret;
} btActionMsg;

typedef struct _Gatewayinfo {
    char v[32];
    uint32_t m;
    uint32_t cap;
    char gw_macaddr[32];
} Gatewayinfo;

typedef struct _GatewayOta {
    char GwOtaPath[64];
    GatewayOta_gw_ota_sta OtaSta;
} GatewayOta;

/* main page push and pop message */
typedef struct _combineMsg {
    uint32_t index; /* ordinal of item */
    pb_size_t which_item;
    union {
        struct _leshiBTmeshGWMsg *lsBTmeshGW_device;
    } item;
} combineMsg;

typedef struct _commonMessage {
    messageType type; /* message type */
    bool has_dir;
    direction dir; /* message direction */
    uint64_t serial; /* message sequence number */
    pb_size_t which_item;
    union {
        Gatewayinfo gw_info; /* Gatewayinfo */
        GatewayOta ota; /* Ota path and status */
    } item;
    uint32_t combo_size;
    combineMsg** combo;
} commonMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _messageType_MIN messageType_MSGCODE_INVALID
#define _messageType_MAX messageType_MSGCODE_GET_GATEWAY_MACADDR_RSP
#define _messageType_ARRAYSIZE ((messageType)(messageType_MSGCODE_GET_GATEWAY_MACADDR_RSP+1))

#define _messageDirection_MIN messageDirection_MSG_DIR_INVALID
#define _messageDirection_MAX messageDirection_MSG_DIR_GWSERVICE
#define _messageDirection_ARRAYSIZE ((messageDirection)(messageDirection_MSG_DIR_GWSERVICE+1))

#define _messageDpType_MIN messageDpType_DP_TYPE_RAW
#define _messageDpType_MAX messageDpType_DP_TYPE_BITMAP
#define _messageDpType_ARRAYSIZE ((messageDpType)(messageDpType_DP_TYPE_BITMAP+1))

#define _GatewayOta_gw_ota_sta_MIN GatewayOta_gw_ota_sta_GW_OTA_FAILURE
#define _GatewayOta_gw_ota_sta_MAX GatewayOta_gw_ota_sta_GW_OTA_SUCCESS
#define _GatewayOta_gw_ota_sta_ARRAYSIZE ((GatewayOta_gw_ota_sta)(GatewayOta_gw_ota_sta_GW_OTA_SUCCESS+1))

#define direction_src_ENUMTYPE messageDirection
#define direction_dst_ENUMTYPE messageDirection



#define Datapoint_type_ENUMTYPE messageDpType




#define GatewayOta_OtaSta_ENUMTYPE GatewayOta_gw_ota_sta


#define commonMessage_type_ENUMTYPE messageType


/* Initializer values for message structs */
#define direction_init_default                   {_messageDirection_MIN, _messageDirection_MIN}
#define type_raw_init_default                    {0, {{NULL}, NULL}}
#define type_string_init_default                 {0, {{NULL}, NULL}}
#define Datapoint_init_default                   {0, _messageDpType_MIN, 0, 0, {""}}
#define leshiBTmeshGWMsg_init_default            {"", NULL, 0, "", 0, 0, {{NULL}, NULL}, 0, 0, {0}, "", ""}
#define btActionMsg_init_default                 {0, {{{NULL}, NULL}}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, false, Datapoint_init_default, 0}
#define Gatewayinfo_init_default                 {"", 0, 0, ""}
#define GatewayOta_init_default                  {"", _GatewayOta_gw_ota_sta_MIN}
#define combineMsg_init_default                  {0, 0, {NULL}}
#define commonMessage_init_default               {_messageType_MIN, false, direction_init_default, 0, 0, {Gatewayinfo_init_default}, 0, {{NULL}, NULL}}
#define direction_init_zero                      {_messageDirection_MIN, _messageDirection_MIN}
#define type_raw_init_zero                       {0, {{NULL}, NULL}}
#define type_string_init_zero                    {0, {{NULL}, NULL}}
#define Datapoint_init_zero                      {0, _messageDpType_MIN, 0, 0, {""}}
#define leshiBTmeshGWMsg_init_zero               {"", NULL, 0, "", 0, 0, {{NULL}, NULL}, 0, 0, {0}, "", ""}
#define btActionMsg_init_zero                    {0, {{{NULL}, NULL}}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, false, Datapoint_init_zero, 0}
#define Gatewayinfo_init_zero                    {"", 0, 0, ""}
#define GatewayOta_init_zero                     {"", _GatewayOta_gw_ota_sta_MIN}
#define combineMsg_init_zero                     {0, 0, {NULL}}
#define commonMessage_init_zero                  {_messageType_MIN, false, direction_init_zero, 0, 0, {Gatewayinfo_init_zero}, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define direction_src_tag                        1
#define direction_dst_tag                        2
#define type_raw_raw_size_tag                    1
#define type_raw_raw_tag                         2
#define type_string_string_size_tag              1
#define type_string_string_tag                   2
#define Datapoint_dpid_tag                       1
#define Datapoint_type_tag                       2
#define Datapoint_len_tag                        3
#define Datapoint_v_raw_tag                      4
#define Datapoint_v_bool_tag                     5
#define Datapoint_v_value_tag                    6
#define Datapoint_v_string_tag                   7
#define Datapoint_v_enum_tag                     8
#define Datapoint_v_bitmap_tag                   9
#define leshiBTmeshGWMsg_deviceId_tag            2
#define leshiBTmeshGWMsg_deviceName_tag          3
#define leshiBTmeshGWMsg_eleCata_tag             4
#define leshiBTmeshGWMsg_devicePid_tag           5
#define leshiBTmeshGWMsg_online_tag              6
#define leshiBTmeshGWMsg_dp_size_tag             7
#define leshiBTmeshGWMsg_dp_tag                  8
#define leshiBTmeshGWMsg_groupId_tag             9
#define leshiBTmeshGWMsg_ret_tag                 10
#define leshiBTmeshGWMsg_deviceVer_tag           11
#define leshiBTmeshGWMsg_hb_time_tag             12
#define btActionMsg_deviceId_tag                 1
#define btActionMsg_groupId_tag                  2
#define btActionMsg_deviceName_tag               3
#define btActionMsg_devicePid_tag                5
#define btActionMsg_online_tag                   6
#define btActionMsg_dp_size_tag                  7
#define btActionMsg_dp_tag                       8
#define btActionMsg_ret_tag                      10
#define Gatewayinfo_v_tag                        1
#define Gatewayinfo_m_tag                        2
#define Gatewayinfo_cap_tag                      3
#define Gatewayinfo_gw_macaddr_tag               4
#define GatewayOta_GwOtaPath_tag                 1
#define GatewayOta_OtaSta_tag                    2
#define combineMsg_index_tag                     1
#define combineMsg_lsBTmeshGW_device_tag         2
#define commonMessage_type_tag                   1
#define commonMessage_dir_tag                    2
#define commonMessage_serial_tag                 3
#define commonMessage_gw_info_tag                4
#define commonMessage_ota_tag                    6
#define commonMessage_combo_size_tag             10
#define commonMessage_combo_tag                  11

/* Struct field encoding specification for nanopb */
#define direction_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    src,               1) \
X(a, STATIC,   SINGULAR, UENUM,    dst,               2)
#define direction_CALLBACK NULL
#define direction_DEFAULT NULL

#define type_raw_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   raw_size,          1) \
X(a, CALLBACK, REPEATED, STRING,   raw,               2)
#define type_raw_CALLBACK pb_default_field_callback
#define type_raw_DEFAULT NULL

#define type_string_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   string_size,       1) \
X(a, CALLBACK, REPEATED, STRING,   string,            2)
#define type_string_CALLBACK pb_default_field_callback
#define type_string_DEFAULT NULL

#define Datapoint_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   dpid,              1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              2) \
X(a, STATIC,   SINGULAR, UINT32,   len,               3) \
X(a, STATIC,   ONEOF,    STRING,   (t_value,v_raw,t_value.v_raw),   4) \
X(a, STATIC,   ONEOF,    BOOL,     (t_value,v_bool,t_value.v_bool),   5) \
X(a, STATIC,   ONEOF,    INT32,    (t_value,v_value,t_value.v_value),   6) \
X(a, STATIC,   ONEOF,    STRING,   (t_value,v_string,t_value.v_string),   7) \
X(a, STATIC,   ONEOF,    INT32,    (t_value,v_enum,t_value.v_enum),   8) \
X(a, STATIC,   ONEOF,    INT32,    (t_value,v_bitmap,t_value.v_bitmap),   9)
#define Datapoint_CALLBACK NULL
#define Datapoint_DEFAULT NULL

#define leshiBTmeshGWMsg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   deviceId,          2) \
X(a, POINTER,  SINGULAR, STRING,   deviceName,        3) \
X(a, STATIC,   SINGULAR, INT32,    eleCata,           4) \
X(a, STATIC,   SINGULAR, STRING,   devicePid,         5) \
X(a, STATIC,   SINGULAR, BOOL,     online,            6) \
X(a, STATIC,   SINGULAR, INT32,    dp_size,           7) \
X(a, CALLBACK, REPEATED, MESSAGE,  dp,                8) \
X(a, STATIC,   SINGULAR, INT32,    groupId,           9) \
X(a, STATIC,   ONEOF,    INT32,    (rets,ret,rets.ret),  10) \
X(a, STATIC,   SINGULAR, STRING,   deviceVer,        11) \
X(a, STATIC,   SINGULAR, STRING,   hb_time,          12)
extern bool leshiBTmeshGWMsg_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field);
#define leshiBTmeshGWMsg_CALLBACK leshiBTmeshGWMsg_callback
#define leshiBTmeshGWMsg_DEFAULT NULL
#define leshiBTmeshGWMsg_dp_MSGTYPE Datapoint

#define btActionMsg_FIELDLIST(X, a) \
X(a, CALLBACK, ONEOF,    STRING,   (actionId,deviceId,actionId.deviceId),   1) \
X(a, STATIC,   ONEOF,    INT32,    (actionId,groupId,actionId.groupId),   2) \
X(a, CALLBACK, SINGULAR, STRING,   deviceName,        3) \
X(a, CALLBACK, SINGULAR, STRING,   devicePid,         5) \
X(a, STATIC,   SINGULAR, BOOL,     online,            6) \
X(a, STATIC,   SINGULAR, INT32,    dp_size,           7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dp,                8) \
X(a, STATIC,   SINGULAR, INT32,    ret,              10)
#define btActionMsg_CALLBACK pb_default_field_callback
#define btActionMsg_DEFAULT NULL
#define btActionMsg_dp_MSGTYPE Datapoint

#define Gatewayinfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   v,                 1) \
X(a, STATIC,   SINGULAR, UINT32,   m,                 2) \
X(a, STATIC,   SINGULAR, UINT32,   cap,               3) \
X(a, STATIC,   SINGULAR, STRING,   gw_macaddr,        4)
#define Gatewayinfo_CALLBACK NULL
#define Gatewayinfo_DEFAULT NULL

#define GatewayOta_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   GwOtaPath,         1) \
X(a, STATIC,   SINGULAR, UENUM,    OtaSta,            2)
#define GatewayOta_CALLBACK NULL
#define GatewayOta_DEFAULT NULL

#define combineMsg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   index,             1) \
X(a, POINTER,  ONEOF,    MESSAGE,  (item,lsBTmeshGW_device,item.lsBTmeshGW_device),   2)
#define combineMsg_CALLBACK NULL
#define combineMsg_DEFAULT NULL
#define combineMsg_item_lsBTmeshGW_device_MSGTYPE leshiBTmeshGWMsg

#define commonMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dir,               2) \
X(a, STATIC,   SINGULAR, UINT64,   serial,            3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (item,gw_info,item.gw_info),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (item,ota,item.ota),   6) \
X(a, STATIC,   SINGULAR, UINT32,   combo_size,       10) \
X(a, CALLBACK, REPEATED, MESSAGE,  combo,            11)
extern bool commonMessage_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field);
#define commonMessage_CALLBACK commonMessage_callback
#define commonMessage_DEFAULT NULL
#define commonMessage_dir_MSGTYPE direction
#define commonMessage_item_gw_info_MSGTYPE Gatewayinfo
#define commonMessage_item_ota_MSGTYPE GatewayOta
#define commonMessage_combo_MSGTYPE combineMsg

extern const pb_msgdesc_t direction_msg;
extern const pb_msgdesc_t type_raw_msg;
extern const pb_msgdesc_t type_string_msg;
extern const pb_msgdesc_t Datapoint_msg;
extern const pb_msgdesc_t leshiBTmeshGWMsg_msg;
extern const pb_msgdesc_t btActionMsg_msg;
extern const pb_msgdesc_t Gatewayinfo_msg;
extern const pb_msgdesc_t GatewayOta_msg;
extern const pb_msgdesc_t combineMsg_msg;
extern const pb_msgdesc_t commonMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define direction_fields &direction_msg
#define type_raw_fields &type_raw_msg
#define type_string_fields &type_string_msg
#define Datapoint_fields &Datapoint_msg
#define leshiBTmeshGWMsg_fields &leshiBTmeshGWMsg_msg
#define btActionMsg_fields &btActionMsg_msg
#define Gatewayinfo_fields &Gatewayinfo_msg
#define GatewayOta_fields &GatewayOta_msg
#define combineMsg_fields &combineMsg_msg
#define commonMessage_fields &commonMessage_msg

/* Maximum encoded size of messages (where known) */
/* type_raw_size depends on runtime parameters */
/* type_string_size depends on runtime parameters */
/* leshiBTmeshGWMsg_size depends on runtime parameters */
/* btActionMsg_size depends on runtime parameters */
/* combineMsg_size depends on runtime parameters */
/* commonMessage_size depends on runtime parameters */
#define Datapoint_size                           47
#define GatewayOta_size                          67
#define Gatewayinfo_size                         78
#define direction_size                           4

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
